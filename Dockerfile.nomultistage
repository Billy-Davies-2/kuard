# Legacy style single stage Dockerfile (no multi-stage). Not recommended for production
# but preserved (modernized) for users following the original book instructions.
# Produces a larger image containing toolchain.

FROM golang:1.25-alpine

RUN apk add --no-cache git bash ca-certificates build-base curl

WORKDIR /src
COPY go.mod go.sum ./
RUN go mod download

COPY . .

ARG VERSION=dev
ARG COLOR=blue
ENV CGO_ENABLED=0

RUN go build -ldflags "-s -w -X github.com/kubernetes-up-and-running/kuard/pkg/version.VERSION=${VERSION}-${COLOR}" -o /usr/local/bin/kuard ./cmd/kuard

USER nobody:nobody
EXPOSE 8080
ENTRYPOINT ["/usr/local/bin/kuard"]
FROM golang:1.11-alpine AS build

# Install Node and NPM.
RUN apk update && apk upgrade && apk add --no-cache git nodejs bash npm

# Get dependencies for Go part of build
RUN go get -u github.com/jteeuwen/go-bindata/...
RUN go get github.com/tools/godep

WORKDIR /go/src/github.com/kubernetes-up-and-running/kuard

# Copy all sources in
COPY . .

# This is a set of variables that the build script expects
ENV VERBOSE=0
ENV PKG=github.com/kubernetes-up-and-running/kuard
ENV ARCH=amd64
ENV VERSION=test

# Do the build. Script is part of incoming sources.
RUN build/build.sh

# At runtime run as non-root user
USER nobody:nobody

CMD [ "/go/bin/kuard" ]