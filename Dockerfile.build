# Modernized builder image for kuard
# Retains legacy purpose (pre-baked build env + cached stdlib) but updates to Go 1.25
# and removes abandoned dependencies. Prefer the root multi-stage Dockerfile for
# typical production builds. This is provided for users following the original
# book workflow that relied on a separate build image.
#
# Example usage:
#   docker build -t kuard-build -f Dockerfile.build --build-arg ALL_ARCH="amd64 arm64" .
#   docker run --rm -v "$PWD":/workspace -w /workspace kuard-build make build

FROM golang:1.25-alpine

ARG ALL_ARCH="amd64 arm64"
ENV ALL_ARCH=${ALL_ARCH}

RUN apk add --no-cache git bash curl ca-certificates build-base unzip

# Bun for building Next.js frontend if desired.
ENV BUN_INSTALL=/usr/local/bun
RUN curl -fsSL https://bun.sh/install | bash && \
    ln -s /usr/local/bun/bin/bun /usr/local/bin/bun

WORKDIR /data
ENV HOME=/data \
    GOPATH=/data/go \
    PATH=/data/go/bin:/usr/local/bun/bin:$PATH

# Pre-create architecture specific stdlib cache directories (mirrors legacy optimization intent)
RUN for ARCH in $(echo ${ALL_ARCH}); do \
      mkdir -p /data/std/$ARCH; \
    done

LABEL org.opencontainers.image.source="https://github.com/kubernetes-up-and-running/kuard" \
      org.opencontainers.image.description="Reusable kuard builder (Go + Bun)" \
      org.opencontainers.image.licenses="Apache-2.0"

CMD ["bash"]
# Copyright 2017 The KUAR Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

FROM golang:1.12-alpine

# We aren't using the /go directory defined in base image
WORKDIR /data
ENV HOME /data
ENV GOPATH /data/go

ENV npm_config_cache=/data/npm_cache

# Create links based on passed in ALL_ARCH
ARG ALL_ARCH
ENV ALL_ARCH ${ALL_ARCH}
RUN for ARCH in ${ALL_ARCH}; do \
      ln -s -f "/data/std/${ARCH}" "/usr/local/go/pkg/linux_${ARCH}_static" ; \
    done

RUN apk update && apk upgrade && apk add --no-cache git nodejs bash npm

# Install any binaries in to /usr/local/bin instead of /go/bin as we will mask
# /go/bin when doing real builds.
RUN GOPATH=/tmp GOBIN=/usr/local/bin go get -u github.com/jteeuwen/go-bindata/...
RUN GOPATH=/tmp GOBIN=/usr/local/bin go get github.com/tools/godep
